import numpy as np

def LU_decomposition(Ai, A, n, eps):
    for p in range(n):
        for i in range(p, n):
            A[p, i] = Ai[p, i] - np.sum([A[p, k] * A[k, i] for k in range(p)])
        for i in range(p + 1, n):
            if np.absolute(A[p, p]) > eps:
                A[i, p] = (Ai[i, p] - np.sum([A[p, k] * A[k, i] for k in range(p)])) / A[p, p]
    y = np.zeros(n)
    for i in range(n):
        y[i] = A[i] - np.sum([A[i, j] * y[j] for j in range(i)])
    x = np.zeros(n)
    for i in range(n - 1, -1, -1):
        if A[i, i] > eps:
            x[i] = (y[i] - np.sum([A[i, j] * x[j] for j in range(n - 1, i, -1)])) / A[i, i]
    return x

